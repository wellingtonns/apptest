name: Build and Deploy App

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: welignton/apptest
      ARGOCD_URL: ${{ secrets.ARGOCD_URL }}
      ARGOCD_USER: ${{ secrets.ARGOCD_USER }}
      ARGOCD_PASS: ${{ secrets.ARGOCD_PASS }}
      ARGOCD_APP: apptest


    steps:
      # üîπ Clona o reposit√≥rio
      - name: Checkout
        uses: actions/checkout@v3

      # üîπ Login no Docker Hub
      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # üîπ Define a TAG curta do commit
      - name: Definir TAG
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      # üîπ Build da imagem
      - name: Build da imagem Docker
        run: |
          docker build -t $IMAGE_NAME:${TAG} .
          docker tag $IMAGE_NAME:${TAG} $IMAGE_NAME:latest

      # üîπ Push da imagem
      - name: Push da imagem Docker
        run: |
          docker push $IMAGE_NAME:${TAG}
          docker push $IMAGE_NAME:latest

      # üîπ Atualiza o YAML com nova tag
      - name: Atualizar deployment.yaml
        run: |
          sed -i "s|image: $IMAGE_NAME.*|image: $IMAGE_NAME:${TAG}|g" manifestos/deployment.yaml

      # üîπ Faz commit e push da atualiza√ß√£o
      - name: Commit e Push
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/wellingtonns/apptest.git
          git add manifestos/deployment.yaml
          git commit -m "Atualiza imagem para ${TAG}" || echo "Nenhuma altera√ß√£o para commit"
          git push origin HEAD

      - name: ArgoCD - Login e Sync
        id: argocd
        run: |
          echo "üîê Fazendo login no ArgoCD"
          TOKEN=$(curl -sk -X POST -H "Content-Type: application/json" \
            -d '{"username":"'"$ARGOCD_USER"'","password":"'"$ARGOCD_PASS"'"}' \
            https://$ARGOCD_URL/api/v1/session | jq -r .token)

          if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
            echo "‚ùå Erro ao autenticar no ArgoCD"
            exit 1
          fi

          echo "üöÄ Disparando sync da aplica√ß√£o $ARGOCD_APP"
          curl -sk -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            https://$ARGOCD_URL/api/v1/applications/$ARGOCD_APP/sync

          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Sync ArgoCD
        run: |
          echo "üîê Fazendo login no ArgoCD"
          TOKEN=$(curl -sk -X POST -H "Content-Type: application/json" \
            -d '{"username":"'"$ARGOCD_USER"'","password":"'"$ARGOCD_PASS"'"}' \
            https://$ARGOCD_URL/api/v1/session | jq -r .token)
              
          if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
            echo "‚ùå Erro ao autenticar no ArgoCD"
            exit 1
          fi
              
          echo "‚úÖ Login efetuado com sucesso!"
              
          echo "üöÄ Disparando sync da aplica√ß√£o $ARGOCD_APP"
          curl -sk -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            https://$ARGOCD_URL/api/v1/applications/$ARGOCD_APP/sync

